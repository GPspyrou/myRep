// lib/cookies.tsx
import { cookies } from 'next/headers';
import { getFirebaseAdminAuth } from './firebaseAdmin';
import { SignJWT, jwtVerify, JWTPayload } from 'jose';

const COOKIE_NAME = process.env.COOKIE_NAME || '__session';

if (!process.env.COOKIE_SECRET) {
  throw new Error('COOKIE_SECRET environment variable is not set');
}

const secret = new TextEncoder().encode(process.env.COOKIE_SECRET);

/**
 * Optionally create your own JWT session cookie.
 * (If you need to generate a custom JWT instead of using Firebase Admin's createSessionCookie.)
 */
export async function createSessionCookie(payload: JWTPayload): Promise<string> {
  return await new SignJWT(payload)
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime('7d')
    .sign(secret);
}

/**
 * Sets the session cookie using Next.js's cookies API.
 *
 * @param sessionCookie - The session cookie string generated by Firebase Admin.
 * @param expiresIn - The cookie expiration time in milliseconds.
 */
export async function setSessionCookie(sessionCookie: string, expiresIn: number) {
  (await cookies()).set({
    name: COOKIE_NAME,
    value: sessionCookie,
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    path: '/',
    maxAge: expiresIn / 1000, // convert milliseconds to seconds
    sameSite: 'lax',
  });
}

/**
 * Reads and verifies the session cookie.
 *
 * @returns The decoded token payload if verification succeeds; otherwise, null.
 */
export async function getUserFromCookie() {
  const token = (await cookies()).get(COOKIE_NAME)?.value;
  if (!token) return null;

  const adminAuth = getFirebaseAdminAuth();
  if (!adminAuth) {
    console.error('Firebase Admin not available');
    return null;
  }

  try {
    const decoded = await adminAuth.verifySessionCookie(token, true);
    return decoded;
  } catch (err) {
    console.error('Invalid session cookie:', err);
    return null;
  }
}

/**
 * Clears the session cookie.
 */
export async function clearSessionCookie() {
  (await cookies()).delete(COOKIE_NAME);
}
